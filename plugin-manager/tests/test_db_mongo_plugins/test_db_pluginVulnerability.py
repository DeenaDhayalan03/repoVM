import pytest
from unittest.mock import patch, MagicMock
from pymongo import CursorType
from scripts.db.mongo.plugins.plugin_vulnerability_report import VulnerablityScanReport

PLUGIN_ID = "test_plugin_id"
MOCK_DATA = {"plugin_id": PLUGIN_ID, "status": "scanned"}
MOCK_REPORTS = [
    {"plugin_id": "test_plugin_id_1", "status": "scanned"},
    {"plugin_id": "test_plugin_id_2", "status": "not_scanned"},
]


@pytest.fixture
def vulnerability_scan_report_instance():
    with patch("scripts.db.mongo.plugins.plugin_vulnerability_report.mongo_client") as MockMongoClient:
        MockMongoClient.return_value = MagicMock()
        yield VulnerablityScanReport()


def test_create_record(vulnerability_scan_report_instance):
    with patch.object(vulnerability_scan_report_instance, "update_one") as mock_update_one:
        vulnerability_scan_report_instance.create_record(PLUGIN_ID, MOCK_DATA)
        mock_update_one.assert_called_once_with(query={"plugin_id": PLUGIN_ID}, data=MOCK_DATA, upsert=True)


def test_get_report(vulnerability_scan_report_instance):
    with patch.object(vulnerability_scan_report_instance, "find_one", return_value=MOCK_DATA) as mock_find_one:
        report = vulnerability_scan_report_instance.get_report(PLUGIN_ID)
        assert report == MOCK_DATA
        mock_find_one.assert_called_once_with(query={"plugin_id": PLUGIN_ID}, filter_dict={"_id": 0})


def test_get_all_reports(vulnerability_scan_report_instance):
    with patch.object(vulnerability_scan_report_instance, "find", return_value=MagicMock(spec=CursorType)) as mock_find:
        cursor = vulnerability_scan_report_instance.get_all_reports()
        assert cursor is not None
        mock_find.assert_called_once_with(query={}, filter_dict={"_id": 0})


def test_update_record(vulnerability_scan_report_instance):
    with patch.object(
        vulnerability_scan_report_instance, "update_one", return_value=MagicMock(modified_count=1)
    ) as mock_update_one:
        modified_count = vulnerability_scan_report_instance.update_record(PLUGIN_ID, {"status": "updated"})
        assert modified_count == 1
        mock_update_one.assert_called_once_with(query={"plugin_id": PLUGIN_ID}, data={"status": "updated"}, upsert=True)
